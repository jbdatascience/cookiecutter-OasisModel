<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2015r4

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="agt xs">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template name="agt:MapToCanAccExampleA_var10_create_rec">
		<xsl:param name="var9_current"/>
		<rec>
			<xsl:variable name="var1_ACCNTNUM">
				<xsl:if test="$var9_current/@ACCNTNUM">
					<xsl:value-of select="'1'"/>
				</xsl:if>
			</xsl:variable>
			<xsl:attribute name="ACCNTNUM">
				<xsl:choose>
					<xsl:when test="string(boolean(string($var1_ACCNTNUM))) != 'false'">
						<xsl:value-of select="string($var9_current/@ACCNTNUM)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="string('0')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:variable name="var2_POLICYNUM">
				<xsl:if test="$var9_current/@POLICYNUM">
					<xsl:value-of select="'1'"/>
				</xsl:if>
			</xsl:variable>
			<xsl:attribute name="POLICYNUM">
				<xsl:choose>
					<xsl:when test="string(boolean(string($var2_POLICYNUM))) != 'false'">
						<xsl:value-of select="string($var9_current/@POLICYNUM)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="string('0')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:variable name="var3_EXCESS">
				<xsl:if test="$var9_current/@EXCESS">
					<xsl:value-of select="'1'"/>
				</xsl:if>
			</xsl:variable>
			<xsl:attribute name="EXCESS">
				<xsl:choose>
					<xsl:when test="string(boolean(string($var3_EXCESS))) != 'false'">
						<xsl:value-of select="string($var9_current/@EXCESS)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="string('0')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:variable name="var4_LIMIT">
				<xsl:if test="$var9_current/@LIMIT">
					<xsl:value-of select="'1'"/>
				</xsl:if>
			</xsl:variable>
			<xsl:attribute name="LIMIT">
				<xsl:choose>
					<xsl:when test="string(boolean(string($var4_LIMIT))) != 'false'">
						<xsl:value-of select="string($var9_current/@LIMIT)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="string('0')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:variable name="var5_SHARE">
				<xsl:if test="$var9_current/@SHARE">
					<xsl:value-of select="'1'"/>
				</xsl:if>
			</xsl:variable>
			<xsl:attribute name="SHARE">
				<xsl:choose>
					<xsl:when test="string(boolean(string($var5_SHARE))) != 'false'">
						<xsl:value-of select="string($var9_current/@SHARE)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="string('0')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:variable name="var6_BLANDED">
				<xsl:if test="$var9_current/@BLANDED">
					<xsl:value-of select="'1'"/>
				</xsl:if>
			</xsl:variable>
			<xsl:attribute name="BLANDED">
				<xsl:choose>
					<xsl:when test="string(boolean(string($var6_BLANDED))) != 'false'">
						<xsl:value-of select="string($var9_current/@BLANDED)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="string('0')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:variable name="var7_MINDED">
				<xsl:if test="$var9_current/@MINDED">
					<xsl:value-of select="'1'"/>
				</xsl:if>
			</xsl:variable>
			<xsl:attribute name="MINDED">
				<xsl:choose>
					<xsl:when test="string(boolean(string($var7_MINDED))) != 'false'">
						<xsl:value-of select="string($var9_current/@MINDED)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="string('0')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
			<xsl:variable name="var8_MAXDED">
				<xsl:if test="$var9_current/@MAXDED">
					<xsl:value-of select="'1'"/>
				</xsl:if>
			</xsl:variable>
			<xsl:attribute name="MAXDED">
				<xsl:choose>
					<xsl:when test="string(boolean(string($var8_MAXDED))) != 'false'">
						<xsl:value-of select="string($var9_current/@MAXDED)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="string('0')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:attribute>
		</rec>
	</xsl:template>
	<xsl:template name="agt:MapToCanAccExampleA_var12_resultof_map">
		<xsl:param name="var11_current"/>
		<xsl:for-each select="$var11_current/rec">
			<xsl:call-template name="agt:MapToCanAccExampleA_var10_create_rec">
				<xsl:with-param name="var9_current" select="."/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="/">
		<root>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance">C:/Users/Administrator/Desktop/git/Flamingo/Files/ValidationFiles/CanAccExampleA.xsd</xsl:attribute>
			<xsl:for-each select="root">
				<xsl:call-template name="agt:MapToCanAccExampleA_var12_resultof_map">
					<xsl:with-param name="var11_current" select="."/>
				</xsl:call-template>
			</xsl:for-each>
		</root>
	</xsl:template>
</xsl:stylesheet>
